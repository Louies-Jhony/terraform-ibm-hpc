# Ensure provisioned VMs are up and Passwordless SSH setup has been established

- name: Connect to remote hosts via bastion and perform tasks
  hosts: [lsf_nodes]
  any_errors_fatal: true
  gather_facts: false
  # become: yes
  vars:
    ansible_ssh_common_args: >
      -o ProxyJump=ubuntu@165.192.141.212
      -o ControlMaster=auto
      -o ControlPersist=30m
      -o UserKnownHostsFile=/dev/null
      -o StrictHostKeyChecking=no
    ansible_user: root
    ansible_ssh_private_key_file: ./../../modules/ansible-roles/storage_id_rsa
  tasks:
    - name: Check passwordless SSH on all scale inventory hosts
      shell: echo PASSWDLESS_SSH_ENABLED
      register: result
      until: result.stdout.find("PASSWDLESS_SSH_ENABLED") != -1
      retries: 60
      delay: 10

- name: Prerequisite Configuration
  hosts: [lsf_nodes]
  any_errors_fatal: true
  gather_facts: false
  # become: yes
  vars:
    ansible_ssh_common_args: >
      -o ProxyJump=ubuntu@165.192.141.212
      -o ControlMaster=auto
      -o ControlPersist=30m
      -o UserKnownHostsFile=/dev/null
      -o StrictHostKeyChecking=no
    ansible_user: root
    ansible_ssh_private_key_file: ./../../modules/ansible-roles/storage_id_rsa
  roles:
     - prerequisite

# - name: Check passwordless SSH connection is setup
#   hosts: all
#   any_errors_fatal: true
#   gather_facts: false
#   connection: local
#   tasks:
#     - name: Check passwordless SSH on all scale inventory hosts
#       shell: echo PASSWDLESS_SSH_ENABLED
#       register: result
#       until: result.stdout.find("PASSWDLESS_SSH_ENABLED") != -1
#       retries: 60
#       delay: 10
#   vars:
#     ansible_ssh_common_args: >-
#       -o ControlMaster=auto
#       -o ControlPersist=30m
#       -o UserKnownHostsFile=/dev/null
#       -o StrictHostKeyChecking=no
#       -o ProxyCommand="ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i ./../../modules/ansible-roles/storage_id_rsa -J ubuntu@165.192.141.212 -W %h:%p root@{{ inventory_hostname }}"


